name: Anax Release Manager

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of Anax to be released, with build number'
        required: true
        type: string

env:
  DOCKERHUB_REGISTRY: ${{ vars.DOCKERHUB_REPO }}
  GITHUB_CONTAINER_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  create-release:
    runs-on: ubuntu-20.04

    environment: release_environment

    steps:
      # Ensure that the repo variables and secrets are set before running any other steps
      - name: Check User Set Variables
        run: |
          if [[ -z "$DOCKER_USER" ]]; then \
          echo "::error::Secret DOCKER_USER was not set"; \
          exit 1; \
          fi
          if [[ -z "$DOCKER_TOKEN" ]]; then \
          echo "::error::Secret DOCKER_TOKEN was not set"; \
          exit 1; \
          fi
          if [[ -z "$DOCKERHUB_REGISTRY" ]]; then \
          echo "::error::Variable DOCKERHUB_REPO was not set"; \
          exit 1; \
          fi
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

      # Upgrade Docker engine version
      - name: Install Latest Docker Version
        run: |
          sudo apt-get purge docker-ce docker-ce-cli containerd.io runc containerd moby-buildx moby-cli moby-compose moby-containerd moby-engine moby-runc

          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable"
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      # Authenticate Dockerhub to allow pushing to our image repo
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }} 
          
      # Authenticate GHCR to allow pulling images (Use GHCR for pulling because Dockerhub rate limits)
      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get Images from Build Workflow Artifacts
        id: get_images
        run: |
          mkdir $RUNNER_TEMP/downloaded_images && cd $RUNNER_TEMP/downloaded_images
          gh run download -n anax-linux-amd64-images-v${{ github.event.inputs.version }}
          gh run download -n anax-linux-arm64-images-v${{ github.event.inputs.version }}
          gh run download -n anax-linux-ppc64el-images-v${{ github.event.inputs.version }}
          
          received_images=""

          for image_file in *.tar.gz; do \
          image_name=$(cat $image_file | docker load); \
          received_images+="${image_name##Loaded image: } "
          done
          echo "RECEIVED_IMAGES=$received_images" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          GH_HOST: github.com
          
      # Promote release and latest tags to Dockerhub
      - name: Promote 'release' and 'latest' tags to Dockerhub
        run: |
          images=($RECEIVED_IMAGES)
          tags=($TO_TAGS)
          for image in "${images[@]}"; do
              image_name=$(echo "$image" | sed 's/.*\///; s/:.*//')
              for tag in "${tags[@]}"; do
                  docker tag ${image} ${TO_REGISTRY}/${image_name}:${tag}
                  docker push ${TO_REGISTRY}/${image_name}:${tag}
              done
          done
        env:
          TO_REGISTRY: ${{ env.DOCKERHUB_REGISTRY }}
          TO_TAGS: release latest
          RECEIVED_IMAGES: ${{ steps.get_images.outputs.RECEIVED_IMAGES }}

      # Get Packages
      - name: Get Packages & Files from Build Workflow Artifacts
        run: |
          mkdir -p $RUNNER_TEMP/release_files/upload && cd $RUNNER_TEMP/release_files

          # Debian Packages
          gh run download -n anax-linux-amd64-deb-package-v2.31.0-1496
          tar -czvf upload/horizon-agent-linux-deb-amd64.tar.gz *.deb
          rm -rf *.deb
          gh run download -n anax-linux-arm64-deb-package-v2.31.0-1496
          tar -czvf upload/horizon-agent-linux-deb-arm64.tar.gz *.deb
          rm -rf *.deb
          gh run download -n anax-linux-armhf-deb-package-v2.31.0-1496
          tar -czvf upload/horizon-agent-linux-deb-armhf.tar.gz *.deb
          rm -rf *.deb
          gh run download -n anax-linux-ppc64el-deb-package-v2.31.0-1496
          tar -czvf upload/horizon-agent-linux-deb-ppc64el.tar.gz *.deb
          rm -rf *.deb

          # RPM Packages
          gh run download -n anax-linux-ppc64el-rpm-package-v2.31.0-1496
          tar -czvf upload/horizon-agent-linux-rpm-ppc64le.tar.gz *.rpm
          rm -rf *.rpm
          gh run download -n anax-linux-amd64-rpm-package-v2.31.0-1496
          tar -czvf upload/horizon-agent-linux-rpm-x86_64.tar.gz *.rpm
          rm -rf *.rpm

          # MacOS Packages
          gh run download -n anax-mac-amd64-mac-package-v2.31.0-1496
          tar -czvf upload/horizon-agent-macos-pkg-x86_64.tar.gz horizon*
          rm -rf horizon*
          
          # Agent Files
          cd ./upload
          gh run download -n anax-agent-files-v2.31.0-1496
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          GH_HOST: github.com

      # Create GH release page
      # missing './release_files/upload/horizon-agent-macos-pkg-arm64.tar.gz'
      # Temporarily use jenkins to upload the mac arm64 package to GHCR?
      - name: Create GitHub Release
        run: |
          SHORTCOMMIT=$(skopeo inspect docker-daemon:${{ env.DOCKERHUB_REGISTRY }}/amd64_agbot:latest | jq -r .Labels.release)

          COMMITISH=$(
            curl -L \
              -H "Accept: application/vnd.github.sha" \
              -H "Authorization: Bearer ${GH_TOKEN}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/commits/${SHORTCOMMIT})

          gh release create v${AGBOT_FULLVER} \
            ${RUNNER_TEMP}/release_files/upload/*.tar.gz \
            ${RUNNER_TEMP}/release_files/upload/agent-install.sh \
            -t "v${AGBOT_FULLVER} Packages" \
            -n "Horizon agent packages from the ${AGBOT_FULLVER} build" \
            --target $COMMITISH
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          GH_HOST: github.com
          AGBOT_FULLVER: ${{ github.event.inputs.version }}