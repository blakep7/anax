name: Anax Release Manager

on:
  # github.event.inputs.version
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of Anax to be released, with build number'
        required: true
        type: string

env:
  DOCKERHUB_REGISTRY: ${{ vars.DOCKERHUB_REPO }}
  GITHUB_CONTAINER_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  create-release:
    runs-on: ubuntu-20.04

    environment: release_environment

    steps:
      # Ensure that the repo variables and secrets are set before running any other steps
      - name: Check User Set Variables
        run: |
          if [[ -z "$DOCKER_USER" ]]; then \
          echo "::error::Secret DOCKER_USER was not set"; \
          exit 1; \
          fi
          if [[ -z "$DOCKER_TOKEN" ]]; then \
          echo "::error::Secret DOCKER_TOKEN was not set"; \
          exit 1; \
          fi
          if [[ -z "$DOCKERHUB_REGISTRY" ]]; then \
          echo "::error::Variable DOCKERHUB_REPO was not set"; \
          exit 1; \
          fi
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

      # Upgrade Docker engine version
      - name: Install Latest Docker Version
        run: |
          sudo apt-get purge docker-ce docker-ce-cli containerd.io runc containerd moby-buildx moby-cli moby-compose moby-containerd moby-engine moby-runc

          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable"
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      # Authenticate Dockerhub to allow pushing to our image repo
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }} 
          
      # Authenticate GHCR to allow pulling images (Use GHCR for pulling because Dockerhub rate limits)
      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # # Checkout our Github repo
      # - name: Checkout Github Repo
      #   uses: actions/checkout@v3

      - name: Get Images from Build Workflow Artifacts
        id: get_images
        run: |
          mkdir $RUNNER_TEMP/downloaded_images && cd $RUNNER_TEMP/downloaded_images
          gh run download -n anax-linux-amd64-images-v${{ github.event.inputs.version }}
          gh run download -n anax-linux-arm64-images-v${{ github.event.inputs.version }}
          gh run download -n anax-linux-ppc64el-images-v${{ github.event.inputs.version }}
          
          received_images=""

          for image_file in *.tar.gz; do \
          image_name=$(cat $image_file | docker load); \
          received_images+="${image_name##* } "
          done
          echo "RECEIVED_IMAGES=$received_images" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          GH_HOST: github.com
          
      # Promote release and latest tags to Dockerhub
      - name: Promote 'release' and 'latest' tags to Dockerhub
        run: |
          images=($RECEIVED_IMAGES)
          tags=($TO_TAGS)
          for image in "${images[@]}"; do
              image_name="${image##*/}"
              image_name="${image_name%%:*}"
              echo $image
              echo $image_name
              for tag in "${tags[@]}"; do
                  docker tag ${image} ${TO_REGISTRY}/${image_name}:${tag}
                  docker push ${TO_REGISTRY}/${image_name}:${tag}
              done
          done
        env:
          TO_REGISTRY: ${{ env.DOCKERHUB_REGISTRY }}
          TO_TAGS: release latest
          RECEIVED_IMAGES: ${{ steps.get_images.outputs.RECEIVED_IMAGES }}

      # # Get Packages
      # - name: Get Packages from Existing Containers
      #   run: ${GITHUB_WORKSPACE}/.github/scripts/package_grab.sh
      #   env:
      #     FROM_REGISTRY: ${{ env.GITHUB_CONTAINER_REGISTRY }}
      #     FROM_TAG: testing

      # # Create GH release page
      # # missing './release_files/upload/horizon-agent-macos-pkg-arm64.tar.gz'
      # # Temporarily use jenkins to upload the mac arm64 package to GHCR?
      # - name: Create GitHub Release
      #   run: |
      #     cd $GITHUB_WORKSPACE
      #     COMMITISH=$(git log -n 1 --pretty=format:'%H')

      #     gh release create v${AGBOT_FULLVER} \
      #       ${RUNNER_TEMP}/release_files/upload/*.tar.gz \
      #       ./agent-install/agent-install.sh \
      #       -t "v${AGBOT_FULLVER} Packages" \
      #       -n "Horizon agent packages from the ${AGBOT_FULLVER} build" \
      #       --target $COMMITISH
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     AGBOT_FULLVER: ${{ steps.promotion.outputs.AGBOT_VERSION }}